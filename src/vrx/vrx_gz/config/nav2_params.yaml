bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: wamv/wamv/base_link
    odom_topic: /odometry/filtered_odom
    bt_loop_duration: 10
    default_server_timeout: 20
    navigators: ['navigate_to_pose', 'navigate_through_poses']
    navigate_to_pose:
      plugin: "nav2_bt_navigator::NavigateToPoseNavigator"
    navigate_through_poses:
      plugin: "nav2_bt_navigator::NavigateThroughPosesNavigator"
    # Enable path progress visualization
    publish_path_progress: true
    path_update_frequency: 10.0

controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 30.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.001
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugins: ["progress_checker"]
    goal_checker_plugins: ["general_goal_checker"]
    controller_plugins: ["FollowPath"]

    # Progress checker parameters - relaxed for marine vehicles
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.3
      movement_time_allowance: 15.0
    
    # Goal checker parameters - relaxed for waypoint transitions
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 1.0
      yaw_goal_tolerance: 0.5
    
    # MPPI Controller optimized for marine vehicle
    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"
      time_steps: 56
      model_dt: 0.05
      batch_size: 2000
      vx_std: 0.2
      vy_std: 0.0
      wz_std: 0.2
      vx_max: 0.5
      vx_min: 0.0
      vy_max: 0.0
      wz_max: 0.8
      iteration_count: 1
      prune_distance: 1.7
      transform_tolerance: 0.1
      temperature: 0.3
      gamma: 0.015
      motion_model: "Ackermann"
      visualize: true
      regenerate_noises: false
      enforce_path_inversion: false
      inversion_xy_tolerance: 0.2
      inversion_yaw_tolerance: 0.4
      critics: ["ConstraintCritic", "ObstaclesCritic", "GoalCritic", "GoalAngleCritic", "PathAngleCritic", "PathFollowCritic", "PreferForwardCritic"]
      ConstraintCritic:
        enabled: true
        cost_power: 1
        cost_weight: 4.0
      ObstaclesCritic:
        enabled: true
        cost_power: 1
        repulsion_weight: 1.5
        critical_weight: 20.0
        consider_footprint: false
        collision_cost: 10000.0
        collision_margin_distance: 0.1
        near_goal_distance: 0.5
        inflation_radius: 0.3
        cost_scaling_factor: 10.0
      GoalCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 1.4
      GoalAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.0
        threshold_to_consider: 0.5
      PathAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 2.0
        offset_from_path: 0.2
        threshold_to_consider: 0.5
        max_angle_to_furthest: 1.0
        forward_preference: true
      PathFollowCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        offset_from_path: 0.2
        threshold_to_consider: 1.4
      PreferForwardCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 0.5

smoother_server:
  ros__parameters:
    use_sim_time: True
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: True
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner::NavfnPlanner"
      tolerance: 0.5
      use_astar: false
      allow_unknown: true

route_server:
  ros__parameters:
    use_sim_time: True
    route_plugins: ["simple_route"]
    simple_route:
      plugin: "nav2_simple_route_server::SimpleRouteServer"
      expected_route_frequency: 10.0
      enable_route_optimization: true

behavior_server:
  ros__parameters:
    local_costmap_topic: local_costmap/costmap_raw
    global_costmap_topic: global_costmap/costmap_raw
    local_footprint_topic: local_costmap/published_footprint
    global_footprint_topic: global_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors::Spin"
    backup:
      plugin: "nav2_behaviors::BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors::DriveOnHeading"
    wait:
      plugin: "nav2_behaviors::Wait"
    assisted_teleop:
      plugin: "nav2_behaviors::AssistedTeleop"
    local_frame: odom
    global_frame: map
    robot_base_frame: wamv/wamv/base_link
    transform_tolerance: 0.1
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

velocity_smoother:
  ros__parameters:
    use_sim_time: True
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [0.5, 0.0, 1.9]
    min_velocity: [-0.2, 0.0, -1.9]
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "odometry/filtered_odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0

collision_monitor:
  ros__parameters:
    use_sim_time: True
    base_frame_id: "wamv/wamv/base_link"
    odom_frame_id: "odom"
    cmd_vel_in_topic: "cmd_vel_smoothed"
    cmd_vel_out_topic: "cmd_vel"
    transform_tolerance: 0.2
    source_timeout: 5.0
    stop_pub_timeout: 5.0
    observation_sources: ["scan", "depth_sensor"]
    scan:
      type: "scan"
      topic: "/wamv/sensors/lidars/lidar_wamv_sensor/scan"
    # Depth-based collision avoidance for shallow water
    depth_sensor:
      type: "pointcloud"
      topic: "/wamv/sensors/lidars/lidar_wamv_sensor/points"
      min_height: -10.0  # 10m max depth
      max_height: -1.0   # 1m below surface - shallow water detection zone
    polygons: ["FootprintApproach", "ShallowWaterSlowdown", "CriticalDepthStop"]
    # Standard obstacle avoidance
    FootprintApproach:
      type: "circle"
      radius: 3.0
      action_type: "approach"
      min_points: 3
      slowdown_ratio: 0.8
      time_before_collision: 5.0
      simulation_time_step: 0.1
      enabled: True
    # Slowdown zone: 8 inches below draft
    ShallowWaterSlowdown:
      type: "circle"
      radius: 5.0
      action_type: "slowdown"
      min_points: 2
      slowdown_ratio: 0.3  # Slow to 30% speed
      linear_limit: 0.15   # Max 0.15 m/s in shallow water
      angular_limit: 0.4   # Reduced turning speed
      source_timeout: 2.0
      enabled: True
      # Depth threshold: -0.203m (8 inches below surface)
      height_limit: -0.203
    # Hard stop zone: 3 inches below draft (critical depth)
    CriticalDepthStop:
      type: "circle" 
      radius: 2.0
      action_type: "stop"
      min_points: 1  # Single point triggers stop
      enabled: True
      # Critical depth threshold: -0.076m (3 inches below surface)
      height_limit: -0.076

waypoint_follower:
  ros__parameters:
    use_sim_time: True
    loop_rate: 20
    stop_on_failure: false
    action_server_result_timeout: 900.0
    waypoint_task_executor_plugin: "wait_at_waypoint"
    # Enable progress visualization
    publish_waypoint_progress: true
    publish_remaining_path: true
    progress_update_frequency: 5.0
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 0

docking_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 50.0
    initial_perception_timeout: 5.0
    wait_charge_timeout: 5.0
    dock_approach_timeout: 30.0
    undock_timeout: 30.0
    max_retries: 3
    base_frame: "wamv/wamv/base_link"
    fixed_frame: "odom"
    dock_backwards: false
    dock_prestaging_tolerance: 0.5

    # Dock plugins for different dock types
    dock_plugins: ['simple_charging_dock']
    simple_charging_dock:
      plugin: 'opennav_docking::SimpleChargingDock'
      docking_threshold: 0.05
      staging_x_offset: -0.7
      staging_yaw_offset: 0.0
      use_external_detection_pose: true
      use_battery_status: false

    controller:
      k_phi: 3.0
      k_delta: 2.0
      beta: 0.4
      lambda: 2.0
      v_max: 0.25
      v_min: 0.1

local_costmap:
  local_costmap:
    ros__parameters:
      use_sim_time: True
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: wamv/wamv/base_link
      rolling_window: true
      width: 8
      height: 8
      resolution: 0.05
      robot_radius: 1.0
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 1.5
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 0.5
        mark_threshold: 0
        observation_sources: depth_scan
        depth_scan:
          topic: /wamv/sensors/lidars/lidar_wamv_sensor/scan
          max_obstacle_height: 0.5
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 5.0
          raytrace_min_range: 0.0
          obstacle_max_range: 4.0
          obstacle_min_range: 0.0
          inf_is_valid: false
        # Enable obstacle persistence and sharing
        footprint_clearing_enabled: true
        combination_method: 1
        publish_observations: true
        observation_persistence_time: 60.0
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      use_sim_time: True
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: wamv/wamv/base_link
      robot_radius: 1.0
      resolution: 0.2
      track_unknown_space: true
      rolling_window: true
      width: 800
      height: 800
      plugins: ["obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: depth_scan local_observations
        depth_scan:
          topic: /wamv/sensors/lidars/lidar_wamv_sensor/scan
          max_obstacle_height: 0.5
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 10.0
          raytrace_min_range: 0.0
          obstacle_max_range: 8.0
          obstacle_min_range: 0.0
          inf_is_valid: false
        # Subscribe to local costmap observations for persistent mapping
        local_observations:
          topic: /local_costmap/published_observations
          max_obstacle_height: 2.0
          clearing: False
          marking: True
          data_type: "PointCloud"
          obstacle_max_range: 8.0
          obstacle_min_range: 0.0
        # Enable persistent obstacle tracking
        footprint_clearing_enabled: true
        max_obstacle_height: 2.0
        combination_method: 1
        observation_buffering_time: 10.0
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 1.5
      always_send_full_costmap: True

map_server:
  ros__parameters:
    use_sim_time: True
    yaml_filename: ""

map_saver:
  ros__parameters:
    use_sim_time: True
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True